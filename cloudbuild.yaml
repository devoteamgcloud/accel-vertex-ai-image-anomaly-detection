steps:

# Get differences between previous and current commit
- name: "gcr.io/cloud-builders/git"
  id: "git-differences"
  entrypoint: /bin/bash
  args: 
  - -c
  - |
    git fetch --depth=2
    git --no-pager diff --name-only HEAD^ HEAD > /workspace/diff.txt

- name: "gcr.io/cloud-builders/git"
  args: ['fetch', '--unshallow']

# Python package
- name: "python:3.8"
  dir: "packages/patchcore"
  entrypoint: /bin/bash
  args:
  - -c
  - |
    if grep 'packages/patchcore/' /workspace/diff.txt
    then
      pip install -r requirements-cloudbuild.txt --user
      python setup.py sdist bdist_wheel
      python -m twine upload --repository-url ${_ARTIFACT_REGISTRY_URL_PACKAGE} dist/*
    fi
  env:
  - "PACKAGE_VERSION=1.0.0+${SHORT_SHA}"

# Docker containers
- name: "gcr.io/cloud-builders/docker"
  dir: "containers/python"
  entrypoint: /bin/bash
  args:
  - -c
  - |
    if grep 'packages/patchcore/\|containers/python/' /workspace/diff.txt
    then
      cd ../..
      export _PACKAGE_VERSION=1.0.0+$(git --no-pager log -n 1 --first-parent --pretty=format:%h -- packages/patchcore/)
      cd containers/python/
      echo "Package version is $${_PACKAGE_VERSION}"
      docker build -t ${_ARTIFACT_REGISTRY_URL}/python:${SHORT_SHA} --network=cloudbuild --build-arg ARTIFACT_REGISTRY_URL_PACKAGE=${_ARTIFACT_REGISTRY_URL_PACKAGE} --build-arg PACKAGE_VERSION=$${_PACKAGE_VERSION} .
      docker push ${_ARTIFACT_REGISTRY_URL}/python:${SHORT_SHA}
    fi

- name: "gcr.io/cloud-builders/docker"
  dir: "containers/serving"
  entrypoint: /bin/bash
  args:
  - -c
  - |
    if grep 'packages/patchcore/\|containers/serving/' /workspace/diff.txt
    then
      cd ../..
      export _PACKAGE_VERSION=1.0.0+$(git --no-pager log -n 1 --first-parent --pretty=format:%h -- packages/patchcore/)
      cd containers/serving/
      echo "Package version is $${_PACKAGE_VERSION}"
      docker build -t ${_ARTIFACT_REGISTRY_URL}/serving:${SHORT_SHA} --network=cloudbuild --build-arg ARTIFACT_REGISTRY_URL_PACKAGE=${_ARTIFACT_REGISTRY_URL_PACKAGE} --build-arg PACKAGE_VERSION=$${_PACKAGE_VERSION} .
      docker push ${_ARTIFACT_REGISTRY_URL}/serving:${SHORT_SHA}
    fi

- name: "gcr.io/cloud-builders/docker"
  dir: "containers/training"
  entrypoint: /bin/bash
  args:
  - -c
  - |
    if grep 'packages/patchcore/\|containers/training/' /workspace/diff.txt
    then
      cd ../..
      export _PACKAGE_VERSION=1.0.0+$(git --no-pager log -n 1 --first-parent --pretty=format:%h -- packages/patchcore/)
      cd containers/training/
      echo "Package version is $${_PACKAGE_VERSION}"
      docker build -t ${_ARTIFACT_REGISTRY_URL}/training:${SHORT_SHA} --network=cloudbuild --build-arg ARTIFACT_REGISTRY_URL_PACKAGE=${_ARTIFACT_REGISTRY_URL_PACKAGE} --build-arg PACKAGE_VERSION=$${_PACKAGE_VERSION} .
      docker push ${_ARTIFACT_REGISTRY_URL}/training:${SHORT_SHA}
    fi

# Vertex AI pipeline
- name: "python:3.8"
  dir: "pipeline"
  entrypoint: "/bin/bash"
  args:
  - -c
  - |
    if grep 'packages/patchcore/\|containers/python/\|pipeline/' /workspace/diff.txt
    then
      cd ..
      export _CONTAINER_VERSION=$(git --no-pager log -n 1 --first-parent --pretty=format:%h -- packages/patchcore/ containers/python/)
      cd pipeline/
      echo "Container version is $${_CONTAINER_VERSION}"
      pip install -r requirements.txt --user
      python pipeline.py --pipeline-root gs://${_PIPELINE_BUCKET}/${_PIPELINE_NAME}/${SHORT_SHA} --pipeline-name ${_PIPELINE_NAME} --pipeline-file /workspace/pipeline.yaml --project ${PROJECT_ID} --tags ${SHORT_SHA}
    fi
  env:
  - "_ARTIFACT_REGISTRY_URL=${_ARTIFACT_REGISTRY_URL}"

- name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
  dir: "pipeline-training"
  entrypoint: /bin/bash
  args:
  - -c
  - |
    if grep 'packages/patchcore/\|containers/training/\|containers/serving/\|pipeline/\|pipeline-training/' /workspace/diff.txt
    then
      cd ..
      export _PIPELINE_VERSION=$(git --no-pager log -n 1 --first-parent --pretty=format:%h -- packages/patchcore/ containers/python/ pipeline/)
      export _CONTAINER_TRAINING_VERSION=$(git --no-pager log -n 1 --first-parent --pretty=format:%h -- packages/patchcore/ containers/training/)
      export _CONTAINER_SERVING_VERSION=$(git --no-pager log -n 1 --first-parent --pretty=format:%h -- packages/patchcore/ containers/serving/)
      cd pipeline-training/
      echo "Pipeline version is $${_PIPELINE_VERSION}"
      echo "Container training version is $${_CONTAINER_TRAINING_VERSION}"
      echo "Container serving version is $${_CONTAINER_SERVING_VERSION}"
      gcloud beta functions deploy retrain-model --gen2 --trigger-http --allow-unauthenticated --service-account=${_PIPELINE_SA} --runtime=python38 --region=${_REGION} --entry-point=retrain_model --memory=1024MB --source=. --min-instances=0 --max-instances=1 --timeout=3600 --set-env-vars=_PROJECT_ID=${_PROJECT_ID},_REGION=${_REGION},_PIPELINE_SA=${_PIPELINE_SA},_PIPELINE_HASH=$${_PIPELINE_VERSION},_PIPELINE_BUCKET=${_PIPELINE_BUCKET},_MODEL_BUCKET=${_MODEL_BUCKET},_CONTAINER_TRAINING_VERSION=$${_CONTAINER_TRAINING_VERSION},_CONTAINER_SERVING_VERSION=$${_CONTAINER_SERVING_VERSION},_ARTIFACT_REGISTRY_URL=${_ARTIFACT_REGISTRY_URL}
    fi

timeout: 36000s
